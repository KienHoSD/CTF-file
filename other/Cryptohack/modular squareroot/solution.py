n = 8479994658316772151941616510097127087554541274812435112009425778595495359700244470400642403747058566807127814165396640215844192327900454116257979487432016769329970767046735091249898678088061634796559556704959846424131820416048436501387617211770124292793308079214153179977624440438616958575058361193975686620046439877308339989295604537867493683872778843921771307305602776398786978353866231661453376056771972069776398999013769588936194859344941268223184197231368887060609212875507518936172060702209557124430477137421847130682601666968691651447236917018634902407704797328509461854842432015009878011354022108661461024768
p = 30531851861994333252675935111487950694414332763909083514133769861350960895076504687261369815735742549428789138300843082086550059082835141454526618160634109969195486322015775943030060449557090064811940139431735209185996454739163555910726493597222646855506445602953689527405362207926990442391705014604777038685880527537489845359101552442292804398472642356609304810680731556542002301547846635101455995732584071355903010856718680732337369128498655255277003643669031694516851390505923416710601212618443109844041514942401969629158975457079026906304328749039997262960301209158175920051890620947063936347307238412281568760161

def legendre(n, p):
    return pow(n, (p - 1) // 2, p) # 1 == quadratic residue
 
def tonelli(n, p):
    assert legendre(n, p) == 1, "not a square (mod p)"
    q = p - 1
    s = 0
    while q % 2 == 0: #(p-1)%2最终得到奇数q
        q //= 2
        s += 1 
    if s == 1: #当2^1 * q = p-1时,根据p= 3 mod 4 得到a
        return pow(n, (p + 1) // 4, p)
    for z in range(2, p): #quadratic non-residue (z) 
        if p - 1 == legendre(z, p):
            break
    c = pow(z, q, p) # c <- z^q
    r = pow(n, (q + 1) // 2, p) # r <- n^q
    t = pow(n, q, p) # t <- n^q
    m = s # m <-s
    t2 = 0
    while (t - 1) % p != 0: #t=0 or t=1
        t2 = (t * t) % p
        for i in range(1, m): #0<i<m t^2*i = 1
            if (t2 - 1) % p == 0:
                break
            t2 = (t2 * t2) % p
        b = pow(c, 1 << (m - i - 1), p) # b <- c^2m-i-1 
        r = (r * b) % p # r<-rb
        c = (b * b) % p # c <-b^2
        t = (t * c) % p # t <-t*b^2
        m = i # m <- i
    return r
 
if __name__ == '__main__':
    ttest = [(n,p)]
    for n, p in ttest:
        r = tonelli(n, p)
        assert (r * r - n) % p == 0
        print("\t  roots : %d %d" % (r, p - r)) 
# r is first solution, second solution is -r，mod p == p-r